pipeline {
  agent {label 'Production_Server'}

  stages {

    stage('Send Start Alert') {
      steps {
        script {
          telegramSend(
              token: 'Telegram_Token',
              chatId: env.Telegram_ChatID,
              message: "The job Deploy to Production has started and is currently running."
          )
        }
      }
    }
    
    stage('Install') {
      steps {
        echo 'Uninstall any older docker versions before attempting to install a new version'
        sh 'sudo apt-get remove docker docker-engine docker.io containerd runc | true'

        echo 'Update the apt package index and install packages'
        sh 'sudo apt-get update | true'
        sh 'sudo apt-get install \
              ca-certificates \
              curl \
              gnupg \
              lsb-release'
        
        echo 'Add Dockerâ€™s official GPG key'
        sh '''
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg | true
        '''

        echo 'Setting set up the docker repository'
        sh 'echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'

        echo 'Update the apt package index'
        sh 'sudo apt-get update | true'

        echo 'Install Docker Engine, containerd, and Docker Compose'
        sh 'yes | sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin'
      }
    }

    // Removing previous and running versions of the container image
    stage('Clean') {
      steps {
        echo 'removing previous container version>>>'
        sh 'docker-compose -f docker-compose-deploy.yml down | true'
        sh 'sudo docker image prune -a'
        echo 'old and running version of container was successfully removed!'
      }
    }

    // Pulling the image from the container repository
    stage('Pull') {
      steps {
        echo 'pulling container image from repository>>>'
        sh 'docker login -u rp1sne22 -p dckr_pat_gi6co2PnC5xTtoElVINANoHAAt4 docker.io'
        sh 'docker pull rp1sne22/dvna-sne22-rp1:1.4'
        echo 'pulling successfull!'
      }
    }

   /* // Vault Implementation
    stage('Fetch Cred'){
      steps {
        withCredentials([vaultString(credentialsId: 'Vault_MySQL_DB', variable: 'env')]) {
            sh 'echo $env > /home/sne22/env/vars.env'
        }
      }
    }
*/
    // Deploying the container to production environment (webserver machine)
    stage('Deploy') {
      steps {
        echo 'attempting container run on port 9090>>>'
      //  sh 'yes | docker-compose -f docker-compose-deploy.yml up -d'
        sh 'docker run --name dvna -p 9090:9090 -d appsecco/dvna:sqlite'
        echo 'containers now deployed and running!'
        echo 'container was successfully deployed to test server!!!'
        echo 'you can now test the application on http://10.1.1.40:9090 >>>'
      }
    }
  }

  // Sending Notification upon job completion
  post {
        success {
            script {
                // Send success notification
                telegramSend(
                    token: 'Telegram_Token',
                    chatId: env.Telegram_ChatID,
                    message: "The job Deploy to Production has completed successfully."
                )
            }
        }
        failure {
            script {
                // Get the cause of the failure
                def failureCause = currentBuild.getResult().toString()
                // Send failure notification
                telegramSend(
                    token: 'Telegram_Token',
                    chatId: env.Telegram_ChatID,
                    message: "The job Deploy to Production has failed due to ${failureCause}."
                )
            }
        }
    }
}
